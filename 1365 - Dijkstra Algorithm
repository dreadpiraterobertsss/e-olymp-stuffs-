#include <bits/stdc++.h>
using namespace std;
vector<vector<int>> arr;
int n,s,f;
const int INF = INT_MAX;
vector<int> dist;

void djk(vector<vector<int>> &arr){
    priority_queue<pair<int,int>, vector<pair<int,int>> , greater<pair<int,int>>> pq;
    pq.push({0, s-1});


    while(!pq.empty()){
        int dis = pq.top().first;
        int node = pq.top().second;
        pq.pop();

        for(int i = 0; i < n; i++){
            if(arr[node][i] > 0){
                int adjnode = i;
                int weight = arr[node][i];

                if (dis + weight < dist[adjnode]){
                    dist[adjnode] = dis + weight;
                    pq.push({dist[adjnode],adjnode});

                }
            }
        }
    }
}


int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    
    cin >> n >> s >> f;
    arr.resize(n,vector<int> (n));
    dist.resize(n,INF);
    dist[s-1] = 0;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n;j ++){
            cin >> arr[i][j];
        }
    }

    djk(arr);

    if(dist[f-1] == INF){
        cout << -1;

    }
    else{
        cout << dist[f-1];
    }


}
