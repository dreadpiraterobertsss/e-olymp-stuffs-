#include <bits/stdc++.h>
using namespace std;
vector<vector<pair<int,int>>> arr;
vector<int> dist;
const int INF = INT_MAX;
vector<int> parent;
int s,f;

void djk(vector<vector<pair<int,int>>> &arr){
    priority_queue<pair<int,int>, vector<pair<int,int>> , greater<pair<int,int>>> pq;
    pq.push({0,s-1});

    while(!pq.empty()){
        int dis = pq.top().first;
        int node = pq.top().second;

        pq.pop();

        for(auto it : arr[node]){
            int adjnode = it.first;
            int weight = it.second;

            if(dis + weight < dist[adjnode]){
                dist[adjnode] = dis + weight;
                pq.push({dist[adjnode],adjnode});
                parent[adjnode] = node;

            }
        }
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int n,m;
    cin >> n >> m;

    
    cin >> s >> f;

    arr.resize(n);
    dist.resize(n, INF);
    parent.resize(n,-1);
    dist[s-1] = 0;
    for(int i = 0; i < m; i++){
        int sp,ep,w;
        cin >> sp >> ep >> w;
        arr[sp-1].emplace_back(ep-1,w);
        arr[ep-1].emplace_back(sp-1,w);
    }

    djk(arr);

    if(dist[f-1] == INF){
        cout << -1;
    }
    else{
        cout << dist[f-1] << "\n";
        vector<int> path;
        for(int i = f-1; i != -1; i = parent[i]){
            path.push_back(i + 1);
        }
        reverse(path.begin(),path.end());
        for(auto it : path){
            cout << it << " ";
        }
    }
    return 0;
}
